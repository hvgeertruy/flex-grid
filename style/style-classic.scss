//Vars
$mq_s: 320px;
$mq_m: 520px;
$mq_l: 920px;
$mq_max: 1002px;
$borderColor: #afafaf;
$gutter_width: 20px;
$legacy_columnCount: 4;



//Base / other non-essentials
.flex [class*="col"] {
    outline: 1px solid $borderColor;
}

img {
    line-height: 0;
    vertical-align: middle;
}
body {
    @media screen and (min-width: $mq_s) { background-color: #f99; }
    @media screen and (min-width: $mq_m) { background-color: #9f9; }
    @media screen and (min-width: $mq_l) { background-color: #99f; }
}

.container {
    min-width: $mq_s;
    max-width: $mq_max;
    margin: 0 auto;
}

[class*="flex-col"] {
    margin-top: 10px;
    margin-bottom: 10px;
}



//valign
/*Important: wrap your text in a <p>! (or something else that is displayblocky) */
.flex-valign {
    display: flex;
    > * {
        display: flex;
        flex-basis: 100%;
        align-items: center;
    }
}



//Grid system
@mixin calcColumnWidth($numberOfColumns, $totalColumns) {
    flex-basis: calc(#{$numberOfColumns} * ((100%)/#{$totalColumns}) - #{$gutter_width}); //Longhand is intentional; IE does not support calc on shorthand flex property
    
    .flex-grid-no-gutter & {
        flex-basis: $numberOfColumns * (100%)/$totalColumns;
    }
}

[class*="flex-col"] {
    box-sizing: border-box;
    margin-left: 10px;
    margin-right: 10px;
    flex: 1 1;

    //No gutter opt-in
    .flex-grid-no-gutter & {
        margin: 0;
    }
}

//Nesting; compensate for stacking gutter
.flex-grid .flex-grid {
    margin: -$gutter_width/2;
}

/* < Ie10 fallback*/
.gtie7 {
    .flex-grid {
        //Clearfix..
        &:before, &:after { content: " "; display: table; }
        &:after { clear: both; }
        *zoom: 1;

        [class*="flex-col"] {
            float: left;
            width: calc((100%/#{$legacy_columnCount}) - #{$gutter_width}); //Predefined width for all columns, otherwise determining gutters will be problematic
        }

        @media screen and (max-width: $mq_m)  {
            [class*="flex-col"] {
                width: calc(100% - #{$gutter_width});
            }
        }
    }
}

.flex {
    width: 100%;
    background-color: #efefef;
    margin: 0 auto;
}
.flex-grid {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;

    &.flex-grid-align-left {
        justify-content: flex-start;
        [class*="flex-col"] {
            flex-grow: 0;
        }
    }

    &.flex-grid-align-right {
        justify-content: flex-end;
        [class*="flex-col"] {
            flex-grow: 0;
        }
    }
}

$grid_columns: 12;

//small (Mobile) - default
.flex-col-1,
.flex-col-2,
.flex-col-3,
.flex-col-4,
.flex-col-s-1 { 
    @include calcColumnWidth(4, 12); 
}

.flex-col-5,
.flex-col-6,
.flex-col-7,
.flex-col-s-half {
    @include calcColumnWidth(6, 12); 
}

.flex-col-8,
.flex-col-9,
.flex-col-10
.flex-col-11,
.flex-col-s-2 {
    @include calcColumnWidth(8, 12); 
}

.flex-col-12,
.flex-col-s-3 {
    @include calcColumnWidth(12, 12); 
}

//medium (Tablet)
@media screen and (min-width: $mq_m)  {
    @for $i from 1 through $grid_columns {
        .flex-col-#{$i} { 
            @include calcColumnWidth($i, $grid_columns);
        }
        .flex-col-m-#{$i} { 
            @include calcColumnWidth($i, $grid_columns);
        }
    }
}

//large (Desktop)
@media screen and (min-width: $mq_l)  {
    @for $i from 1 through $grid_columns {
        .flex-col-#{$i} { 
            @include calcColumnWidth($i, $grid_columns);
        }
    }
}